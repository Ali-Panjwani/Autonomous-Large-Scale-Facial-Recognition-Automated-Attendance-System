from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.datasets import fetch_lfw_people
from sklearn.metrics import classification_report
from sklearn.decomposition import PCA
from sklearn.neural_network import MLPClassifier
import numpy as np

# Load data
lfw_dataset = fetch_lfw_people(min_faces_per_person=100)
_, h, w = lfw_dataset.images.shape
X = lfw_dataset.data
print(X)
y = lfw_dataset.target
print(y)
target_names = lfw_dataset.target_names
# print(target_names)
pcafaces = np.array([f.flatten() for f in X])
# print(pcafaces)

le = LabelEncoder()
labels = le.fit_transform(target_names)
print(labels)
# split into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(pcafaces,y, test_size=0.25)


n_components = 100
pca = PCA(n_components=n_components, whiten=True).fit(X_train)
# apply PCA transformation
X_train_pca = pca.transform(X_train)
X_test_pca = pca.transform(X_test)


print("Fitting the classifier to the training set")
clf = MLPClassifier(hidden_layer_sizes=(1024,), batch_size=256, verbose=True, early_stopping=True).fit(X_train_pca, y_train)


y_pred = clf.predict(X_test_pca)
print(classification_report(y_test, y_pred, target_names=target_names))
